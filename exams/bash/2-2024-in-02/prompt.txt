2024-IN-02: Вашите колеги от съседната лаборатория се нуждаят от shell скрипт, с който да автоматизират създаването
на графични диаграми, визуализиращи йерархии на наследяване на класове в C++ проекти. Самото
създаване на диаграмите се извършва от инструмента d a g - g e r , който приема аргумент – име на текстови
файл с описание на насочен ацикличен граф и генерира на стандартния изход визуализация на графа
в SVG формат. Примерно съдържание на текстови файл с описание на граф:
D o g
A n i m a l
A n i m a l - > D o g
O b j e c t - > D o g
T h r e a d - > D o g
T h r e a d
O b j e c t

A l s a t i a n
D o g - > A l s a t i a n
Всеки ред на файла може да бъде в един от следните два формата:
• node – връх в графа, (D o g );
• pnode - > cnode – ребро в графа, показващо връзката от родител (pnode) към наследник (cnode),
(A n i m a l - > D o g ).
Всички файлове на даден C++ проект са в определена директория (и евентуално нейните под-директории)
като всеки клас е деклариран в някой заглавен (header) файл. Първият ред от декларацията на даден
клас е задължително в следния формат:
c l a s s C N a m e : m o d e 1 P 1 , m o d e 2 P 2 , . . . , m o d e N P N
където:
• CName – име на класа; всичко след името на класа е незадължително;
• mode1, …, modeN – спецификатор за достъп (p r i v a t e , p u b l i c или p r o t e c t e d );
• P1,…,PN – име на родителски клас.
Примерен първи ред от декларацията на клас:
c l a s s D o g : p u b l i c A n i m a l , p r i v a t e O b j e c t , p r o t e c t e d T h r e a d
Вашият скрипт трябва да приема два позиционни аргумента – път до директория, съдържаща (гарантирано
валиден) C++ проект и име на изходен графичен файл за визуализирания граф. Графът трябва да
визуализира пълната йерархия на наследяване на класовете в проекта.
Забележки: За удобство приемаме, че идентификаторите в C++ могат да съдържат малки/главни
латински букви, цифри и подчертавка ’_ ’ и не могат да започват с цифра. За реализъм приемаме,
че в кода няма коментари.
34

